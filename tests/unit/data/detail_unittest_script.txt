"""Python unittest script is generated by Regexapp Community Edition

Created by  : user1
Email       : user1@abcxyz.com
Company     : ABC XYZ LLC
Created date: _datetime_
"""

import unittest
import re

class TestDynamicGenTestScript(unittest.TestCase):
    def __init__(self, test_name='', test_data=None,
                 prepared_data=None, pattern=None):
        super().__init__(test_name)
        self.test_data = test_data
        self.prepared_data = prepared_data
        self.pattern = pattern

    def test_today_temperature_is_75_degrees_fahrenheit(self):
        result = re.search(self.pattern, self.test_data)
        self.assertIsNotNone(result)

    def test_the_highest_temperature_ever_recorded_on(self):
        result = re.search(self.pattern, self.test_data)
        self.assertIsNotNone(result)

    def test_ipv4_address_192_168_0_1_preferred(self):
        result = re.search(self.pattern, self.test_data)
        self.assertIsNotNone(result)


def load_tests(loader, tests, pattern):
    test_cases = unittest.TestSuite()

    arguments = list()

    # test case #1 - test_today_temperature_is_75_degrees_fahrenheit
    arguments.append(
        (
            """test_today_temperature_is_75_degrees_fahrenheit""",    # test name
            """today temperature is 75 degrees fahrenheit.""",    # test data
            """phrase(var_subject) is digits(var_degree) degrees word(var_unit).""",    # ref. user prepared data
            r"""(?P<subject>\w+( +\w+)+) +is +(?P<degree>\d+) +degrees +(?P<unit>\w+)\."""   # pattern
        )
    )

    # test case #2 - test_the_highest_temperature_ever_recorded_on
    arguments.append(
        (
            """test_the_highest_temperature_ever_recorded_on""",    # test name
            """the highest temperature ever recorded on Earth is 134 degrees fahrenheit.""",    # test data
            """phrase(var_subject) is digits(var_degree) degrees word(var_unit).""",    # ref. user prepared data
            r"""(?P<subject>\w+( +\w+)+) +is +(?P<degree>\d+) +degrees +(?P<unit>\w+)\."""   # pattern
        )
    )

    # test case #3 - test_ipv4_address_192_168_0_1_preferred
    arguments.append(
        (
            """test_ipv4_address_192_168_0_1_preferred""",    # test name
            """   IPv4 Address. . . . . . . . . . . : 192.168.0.1(Preferred)""",    # test data
            """   IPv4 Address. . . . . . . . . . . : ipv4_address(var_ipv4_addr)(word(var_status))""",    # ref. user prepared data
            r""" +IPv4 +Address\. +\. +\. +\. +\. +\. +\. +\. +\. +\. +\. +: +(?P<ipv4_addr>((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]?\d))(\.((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]?\d))){3})\((?P<status>\w+)\)"""   # pattern
        )
    )

    for arg in arguments:
        test_name, test_data, prepared_data, pattern = arg
        testcase = TestDynamicGenTestScript(
            test_name=test_name,
            test_data=test_data,
            prepared_data=prepared_data,
            pattern=pattern
        )
        test_cases.addTest(testcase)
    return test_cases